swagger: "2.0"
info:
  version: "0.0.1"
  title: RackHD 2.0
# during dev, should point to your local machine
#host: localhost:10010
# basePath prefixes all resource paths
basePath: /api/2.0
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
  - name: "/api/2.0"
    description: RackHD 2.0 API
paths:
  /pollers/library:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of possible library pollers
      description: |
        get list of possible library pollers
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            list of all pollers
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/library/{identifier}:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibByIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single library poller
      description: |
        get a single library poller
      parameters:
        - name: identifier
          in: path
          description: |
            library poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single library poller
          schema:
            type: object
        404:
          description: |
            There is no library poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: poller.2.0.json
      summary: |
        get list of all pollers
      description: |
        get list of all pollers
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            list of all pollers
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: pollersPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: poller.2.0.json#/definitions/Poller
      x-view: poller.2.0.json
      summary: |
        create a poller
      description: |
        create a poller
      parameters:
      - name: content
        in: body
        description: foo
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            poller created
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: poller.2.0.json
      summary: |
        Get specifics of the specified poller
      description: |
        Get specifics of the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Specifics of the specified poller
          schema:
            type: object
        404:
          description: |
            There is no  poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: pollersPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: poller.2.0.json#/definitions/PartialPoller
      x-view: poller.2.0.json
      summary: |
        patch specifics of the specified poller
      description: |
        patch specifics of the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
        - name: content
          in: body
          description: foo
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Specifics of the patched poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: pollersDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        delete the specified poller
      description: |
        delete the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Poller delete successfully
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersDataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get data for the specific poller
      description: |
        Get data for the specific poller
      parameters:
        - name: identifier
          in: path
          description: |
            identifier (ip address or NodeId) for the data from a poller
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            data for poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data/current:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersCurrentDataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get latest data for the specific poller
      description: |
        Get latest data for the specific poller
      parameters:
        - name: identifier
          in: path
          description: |
            identifier (ip address or NodeId) for the data from a poller
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            data for poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /templates/metadata:
    x-swagger-router-controller: templates
    get:
      operationId: templatesMetaGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of metadata for all templates
      description: |
        get list of metadata for all templates
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            list of possible templates
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/metadata/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesMetaGetByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get metadata for a specific template
      description: |
        get metadata for a specific template
      parameters:
        - name: name
          in: path
          description: |
            template name
          required: true
          type: string
        - name: scope
          in: query
          description: |
            template scope
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single template metadata
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/library/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesLibGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single template
      description: |
        get a single template
      parameters:
        - name: name
          in: path
          description: |
            template name
          required: true
          type: string
        - name: scope
          in: query
          description: |
            template scope
          required: false
          type: string
          default: 'global'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single template
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: templatesLibPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        put a single template
      description: |
        put a single template
      parameters:
        - name: name
          in: path
          description: |
            objectid of template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            template scope
          required: false
          type: string
          default: 'global'
      consumes:
        - text/plain
        - application/x-www-form-urlencoded
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return template
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: templatesLibDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        delete a single template
      description: |
        delete a single template
      parameters:
        - name: name
          in: path
          description: |
            objectid of template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            template scope
          required: false
          type: string
          default: 'global'
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            delete template
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /templates/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesGetByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single template
      description: |
        get a single template
      parameters:
        - name: name
          in: path
          description: |
            template name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single template
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /views:
    x-swagger-router-controller: views
    get:
      operationId: viewsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get all views
      description: |
        get all views
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            all views
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /views/{identifier}:
    x-swagger-router-controller: views
    get:
      operationId: viewsGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get view with specified identifier
      description: |
        get view with specified identifier
      parameters:
        - name: identifier
          in: path
          description: |
            Name of view to get
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single view
          schema:
            type: object
        404:
          description: |
            There is no view with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: viewsPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      consumes:
        - text/plain
        - application/octet-stream
      summary: |
        put a single view
      description: |
        put a single view
      parameters:
        - name: identifier
          in: path
          description: |
            Name of view to create or update
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return template
          schema:
            type: object
    delete:
      operationId: viewsDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        put a single view
      description: |
        put a single view
      parameters:
        - name: identifier
          in: path
          description: |
            Name of view to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            return template
          schema:
            type: object
        404:
          description: |
            There is no view with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/pack:
    x-swagger-router-controller: skus
    post:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      operationId: skuPackPost
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of skus
      description: |
        get list of skus
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
             list of skus
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus:
    x-swagger-router-controller: skus
    get:
      operationId: skusGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of skus
      description: |
        get list of skus
      parameters:
        - name: query
          in: query
          description: query object to pass through to waterline.
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
             list of skus
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: skusPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        create a sku
      description: |
        create a sku
      parameters:
        - name: body
          in: body
          description: |
            object post to apply.
          required: true
          schema:
                  $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            sku to create
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: skusPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        create or update a sku
      description: |
        create or update a sku
      parameters:
        - name: body
          in: body
          description: |
            object post to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            create or updated sku definition
          schema:
            type: object
        500:
          description: |
            Update failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}:
    x-swagger-router-controller: skus
    get:
      operationId: skusIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single sku
      description: |
        get a single sku
      parameters:
        - name: identifier
          in: path
          description: |
            objectid of sku
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return sku
          schema:
            type: object
        404:
          description: |
            There is no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: skusPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        patch a single sku
      description: |
        patch a single sku
      parameters:
        - name: identifier
          in: path
          description: |
            The sku identifier
          required: true
          type: string
        - name: body
          in: body
          description: object patches to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            sku to patch
          schema:
            type: object
        404:
          description: |
            Not found, no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Patch failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: skusIdDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete specific sku.
      description: |
        Delete specific sku.
      parameters:
        - name: identifier
          in: path
          description: |
            The sku objectid.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            return all skus
          schema:
            type: object
        404:
          description: |
            sku with identifier not found, failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}/nodes:
    x-swagger-router-controller: skus
    get:
      operationId: skusIdGetNodes
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get nodes for specific sku
      description: |
        get nodes for specific sku
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return nodes associated with that sku
          schema:
            type: object
        404:
          description: |
            There is no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}/pack:
    x-swagger-router-controller: skus
    put:
      operationId: skusIdPutPack
      x-privileges: [ 'write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        put a sku pack to specific sku
      description: |
        put a sku pack to specific sku
      parameters:
        - name: identifier
          in: path
          description: |
            The identifier of the sku pack.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: |
            return sku pack id.
          schema:
            type: object
        404:
          description: |
            There is no skupack with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: skusIdDeletePack
      x-privileges: [ 'write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a pack for a specific sku
      description: |
        Delete a pack for a specific sku.
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: |
            return nodes associated with that sku
          schema:
            type: object
        404:
          description: |
            There is no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of possible profiles
      description: |
        get list of possible profiles
      tags: [ "/api/2.0" ]
      parameters:
        - name: macs
          in: query
          description: |
            List of valid MAC addresses to lookup
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: mac
          in: query
          description: |
            When macs parameter is not passed, passed with IP adds MAC address to lookup
          required: false
          type: string
        - name: ip
          in: query
          description: |
            When macs parameters is not passed, passed with MAC adds IP address to lookup
          required: false
          type: string
      responses:
        200:
          description: |
            list of profiles for specified mac / ip
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/switch/error:
    x-swagger-router-controller: profiles
    post:
      operationId: profilesPostSwitchError
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        create a switch error
      description: |
        create a switch error
      parameters:
        - name: body
          in: body
          description: |
            switch error.
          required: true
          schema:
                  $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            switch error posted.
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/switch/{vendor}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetSwitchVendor
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single profile
      description: |
        get a single profile
      parameters:
        - name: vendor
          in: path
          description: |
            The switch vendor name.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return profile
          schema:
            type: object
        404:
          description: |
            Profile not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/metadata:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetMetadata
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: profiles.2.0.json
      summary: |
        get list of possible profiles from database
      description: |
        get list of possible profiles from database
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            list of possible profiles
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/metadata/{name}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetMetadataByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: profiles.2.0.json
      summary: |
        get a single profile's metadata from database
      description: |
        get a single profile's metadata from database
      parameters:
        - name: name
          in: path
          description: |
            The profile name.
          required: true
          type: string
        - name: scope
          in: query
          description: Profile scope 
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return profile
          schema:
            type: object
        404:
          description: |
            There is no profile in the library with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/library/{name}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetLibByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a single profile's raw data
      description: |
        get a single profile's raw data
      parameters:
        - name: name
          in: path
          description: |
            The profile name.
          required: true
          type: string
        - name: scope
          in: query
          description: Profile scope
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return profile
          schema:
            type: object
        404:
          description: |
            There is no profile in the library with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: profilesPutLibByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        put a single profile
      description: |
        put a single profile
      parameters:
        - name: name
          in: path
          description: |
            The profile name.
          required: true
          type: string
        - name: scope
          in: query
          description: Profile scope
          required: false
          type: string
      consumes:
        - application/octet-stream
        - application/x-www-form-urlencoded
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            profile to put
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /obms/library:
    x-swagger-router-controller: obms
    get:
      x-swagger-serializer: obms
      operationId: getObmLib
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: obm.2.0.json
      summary: |
        get list of possible OBM services
      description: |
        get list of possible OBM services
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            get list of possible OBM services
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/library/{identifier}:
    x-swagger-router-controller: obms
    get:
      x-swagger-serializer: obms
      operationId: getObmLibById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: obm.2.0.json
      summary: |
        get a single OBM service
      description: |
        get a single OBM service
      parameters:
        - name: identifier
          in: path
          description: |
            The obm service name.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            return OBM service
          schema:
            type: object
        404:
          description: |
            The obm service with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/tasks:
    x-swagger-router-controller: workflowTasks
    get:
      operationId: workflowsGetAllTasks
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of tasks possible to run in workflows
      description: |
        Get list of tasks possible to run in workflows
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            List of tasks possible to run in workflows
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: workflowsPutTask
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Add tasks to task library
      description: |
        Add tasks to task library
      parameters:
        - name: body
          in: body
          description: Workflow name
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Task created
          schema:
            type: object
        500:
          description: |
            Error problem was encountered, task was not written.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/tasks/{injectableName}:
    x-swagger-router-controller: workflowTasks
    get:
      operationId: workflowsGetTasksByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the task with the specified injectable name
      description: |
        Get the task with the specified injectable name
      parameters:
        - name: injectableName
          in: path
          description: |
            Task injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Task with the specified injectable name
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteTasksByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete the task with the specified injectable name
      description: |
        Delete the task with the specified injectable name
      parameters:
        - name: injectableName
          in: path
          description: |
            Task injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Task deleted
          schema:
            type: object
        404:
          description: |
            The task with the specified injectable name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/graphs:
    x-swagger-router-controller: workflowGraphs
    get:
      operationId: workflowsGetGraphs
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of all graphs
      description: |
        Get list of all graphs
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            List of graphs
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: workflowsPutGraphs
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Add a graph to the graph library
      description: |
        Add a graph to the graph library
      parameters:
        - name: body
          in: body
          description: Workflow name
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Graph created
          schema:
            type: object
        500:
          description: |
            Error problem was encountered, graph was not written.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/graphs/{injectableName}:
    x-swagger-router-controller: workflowGraphs
    get:
      operationId: workflowsGetGraphsByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the graph with the specified injectable name
      description: |
        Get the graph with the specified injectable name
      parameters:
        - name: injectableName
          in: path
          description: |
            Graph injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Graph with the specified injectable name
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteGraphsByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete the graph with the specified injectable name
      description: |
        Delete the graph with the specified injectable name
      parameters:
        - name: injectableName
          in: path
          description: |
            Graph injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Graph deleted
          schema:
            type: object
        404:
          description: |
            The graph with the specified injectable name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /workflows:
    x-swagger-router-controller: workflows
    get:
      operationId: workflowsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of active and past run workflow instances
      description: |
        Get list of active and past run workflow instances
      tags: [ "/api/2.0" ]
      parameters:
        - name: active
          in: query
          description: |
            Filter active workflows
          required: false
          type: boolean
      responses:
        200:
          description: |
            Fetch workflows
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: workflowsPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Run a new workflow
      description: |
        Run a new workflow
      parameters:
        - name: body
          in: body
          description: Workflow name
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: Workflow name
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Success
          schema:
            type: object
        500:
          description: |
            Error problem was encountered, workflow was not run.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/{identifier}:
    x-swagger-router-controller: workflows
    get:
      operationId: workflowsGetByInstanceId
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a specific workflow
      description: |
        get a specific workflow
      parameters:
        - name: identifier
          in: path
          description: |
            Workflow identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Specified workflow
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteByInstanceId
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete the workflow with the specified ID
      description: |
        Delete the workflow with the specified ID
      parameters:
        - name: identifier
          in: path
          description: |
            Workflow ID
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Canceled workflows for specified node
          schema:
            type: object
        404:
          description: |
            The workflow with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/{identifier}/action:
    x-swagger-router-controller: workflows
    put:
      operationId: workflowsAction
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Perform the specified action on the selected workflow
      description: |
        Perform the specified action on the selected workflow
      parameters:
        - name: identifier
          in: path
          description: |
            Workflow identifier
          required: true
          type: string
        - name: action
          in: body
          description:
            Command to execute on selected workflow
          required: true
          schema:
            $ref: '#/definitions/action'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Specified workflow
          schema:
            type: object
        404:
          description: |
            The workflow with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /nodes/{identifier}/workflows/action:
    x-swagger-router-controller: nodes
    put:
      operationId: nodesWorkflowActionById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Cancel currently running workflows for specified node
      description: |
        Cancel currently running workflows for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: action
          in: body
          description:
            Command to execute on selected workflow
          required: true
          schema:
            $ref: '#/definitions/action'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Canceled workflows for specified node
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/workflows:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetWorkflowById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Fetch all workflows for specified node
      description: |
        Fetch all workflows for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: active
          in: query
          description: |
            Filter active workflows
          required: false
          type: boolean
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            all workflows for specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: nodesPostWorkflowById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        create workflow for specified node
      description: |
        create workflow for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: Workflow name
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: Workflow name
          required: false
          type: string
# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.  We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object

      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            the workflow that was created
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /nodes/{identifier}/pollers:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetPollersById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Fetch all pollers for specified node
      description: |
        Fetch all pollers for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            all pollers of specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs/{source}:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogSourceById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Fetch catalog of specified node for given source
      description: |
        Fetch catalog of specified node for given source
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: source
          in: path
          description: |
            Source catalog name to fetch
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            specific source catalog of specified node, |
            empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Fetch catalog of specified node
      description: |
        Fetch catalog of specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            all catalogs of specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/obm/identify:
    x-swagger-router-controller: nodes
    get:
      operationId: unimplemented
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Fetch status of identify light on node through OBM (if supported)
      description: |
        Fetch status of identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: obm identity light settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: nodesPostObmIdById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Enable or disable identify light on node through OBM (if supported)
      description: |
        Enable or disable identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: content
          in: body
          description: foo
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/obm:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesGetObmById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: obm.2.0.json
      summary: |
        get the obm settings associated with a node.
      description: |
        get the obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: obm settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPostObmById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        set the obm settings associated with a node.
      description: |
        set the obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
              node id value
          required: true
          type: string
        - name: body
          in: body
          description: |
            obm settings to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/ssh:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesGetSshById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      tags: [ "/api/2.0" ]
      summary: |
        get the ssh settings associated with a node.
      description: |
        get the ssh settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
              node id value
          required: true
          type: string
      responses:
        200:
          description: ssh settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no ssh settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPostSshById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        set the ssh settings associated with a node.
      description: |
        set the ssh settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            ssh settings to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: ssh settings accepted
        404:
          description: |
            The node with the identifier was not found or has no ssh settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/tags/{tagName}:
    x-swagger-router-controller: nodes
    delete:
      operationId: nodesMasterDelTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete specified tag from all nodes.
      description: |
        Delete specified tag from all nodes.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Delete successful
        404:
          description: The tag name identifier was not found.

  /nodes/{identifier}:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: node.2.0.json
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: nodesDelById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete specified node.
      description: |
        Delete specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Delete successful
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPatchById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Patch specified node
      description: |
        Patch specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema:
           $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/tags:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetTagsById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        List of all tags on the node or an empty object if there are none
      description: |
        List of all tags on the node or an empty object if there are none
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: nodesPatchTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: node.2.0.json#/definitions/PartialNode
      summary: |
        Patch tags onto specified node
      description: |
        Patch tags onto specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/tags/{tagName}:
    x-swagger-router-controller: nodes
    delete:
      operationId: nodesDelTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a tag from the specified node.
      description: |
        Delete a tag from the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
        - name: tagName
          in: path
          description: The name of the tag
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: Delete successful
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      x-view: node.2.0.json
      operationId: nodesGetAll
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        400:
          description: invalidAttributes - 1 attribute is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      x-swagger-schema: node.2.0.json#/definitions/Node
      operationId: nodesPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        post
      description: |
        post
      parameters:
      - name: identifiers
        in: body
        description: |
          Mac addresses and unique aliases to identify the node by, |
          expect a string or an array of strings.
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /lookups:
    x-swagger-router-controller: lookups
    get:
      operationId: lookupsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        find all
      description: |
        find all
      parameters:
      - name: q
        in: query
        description: query object to pass through to waterline.
        required: false
        type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: lookupsPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: Lookups.2.0.json#/definitions/LookupPost
      summary: |
        find all
      description: |
        put all
      parameters:
      - name: body
        in: body
        description: lookup record to create
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /lookups/{id}:
    x-swagger-router-controller: lookups
    get:
      operationId: lookupsGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        lookup id
      description: |
        lookup id
      parameters:
        - name: id
          in: path
          description: id of thing to lookup
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: lookupsDelById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete specified lookup details.
      description: |
        Delete specified lookup details.
      parameters:
        - name: id
          in: path
          description: |
            id of the lookup record to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Delete successful
        404:
          description: The lookup with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

    patch:
      operationId: lookupsPatchById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: Lookups.2.0.json#/definitions/LookupBase
      summary: |
        Patch specified lookup record
      description: |
        Patch specified lookup record
      parameters:
        - name: id
          in: path
          description: |
            id of the lookup record to patch.
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema:
           $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{fileidentifier}:
    x-swagger-router-controller: files
    get:
      operationId: filesGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get file based on uuid or file name
      description: |
        Get file based on uuid or file name.
      parameters:
        - name: fileidentifier
          in: path
          description: uuid or file name of a file as provided when you originally stored it.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
# https://github.com/swagger-api/swagger-spec/issues/260 means we can't
# describe the return of a file easily today until jsonspec and swagger
# are "fixed"
        200:
          description: The file requested
          schema:
            type: file
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: filesPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-view: file.2.0.json
      summary: |
        put file based on filename
      description: |
        Put file based on filename, returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: filename of the file you want to store
          required: true
          type: string
# https://github.com/swagger-api/swagger-spec/issues/326 does not yet accept files
#       - name: content
#          in: body
#          description: the attachment content
#          required: true
#          schema:
#            type: file
#      consumes:
#        - application/octet-stream
      tags: [ "/api/2.0" ]
      consumes:
        - application/octet-stream
        - application/x-www-form-urlencoded
      responses:
        200:
          description: Ready.
          schema:
            type: string
        500:
          description: Failure serving file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: filesDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        delete file based on uuid
      description: |
        Delete a file based on uuid.
      parameters:
        - name: fileidentifier
          in: path
          description: UUID of the file you wish to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: File successfully deleted.
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Error deleting file from the database.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{filename}/md5:
    x-swagger-router-controller: files 
    get:
      operationId: filesMd5Get
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get md5sum based on file name
      description: |
        Get md5sum based on file name.
      parameters:
        - name: filename
          in: path
          description: File name of a file as provided when you originally stored it.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: The file requested
          schema:
            type: object
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{filename}/metadata:
    x-swagger-router-controller: files
    get:
      operationId: filesMetadataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: file.2.0.json
      summary: |
        get file metadata by file name
      description: |
        Get file metadata by file name
      parameters:
        - name: filename
          in: path
          description: name of a file as provided when you originally stored it.
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: The file requested
          schema:
            type: object
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files:
    x-swagger-router-controller: files
    get:
      operationId: filesGetAll
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get all available files
      description: |
        Get all available files
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: The file requested
          schema:
            type: object
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /config:
    x-swagger-router-controller: config
    get:
      operationId: configGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get server configuration
      description: |
        Get server configuration.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: configPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        patch/update server configuration
      description: |
        Patch/update server configuration and then return the patched configuration.
      tags: [ "/api/2.0" ]
      consumes:
        - application/json
      parameters:
        - name: config
          in: body
          description: Updated config fields
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /catalogs:
    x-swagger-router-controller: catalogs
    get:
      operationId: catalogsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: query
          in: query
          description: query object to pass through to waterline.
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalogs/{identifier}:
    x-swagger-router-controller: catalogs
    get:
      operationId: catalogsIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: identifier
          in: path
          description: identifier of a catalog
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dhcp:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get DHCP lease table
      description: |
        Fetch the dhcp leases.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            A list of all DHCP leases registered with this instance of the service.
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
  /dhcp/lease/{mac}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        fetch lease information for the mac specified
      description: |
        Fetch lease information for the mac specified.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
    delete:
      operationId: unimplemented
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: get list of all catalogs
      description: |
        Delete the lease for the mac specified and return information about deleted lease.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
  /tags:
    x-swagger-router-controller: tags
    get:
      operationId: getAllTags
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Retrieve information about all tags
      description: |
        Retrieve information about all tags
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            An array of all tags
          schema:
            type: array
            items: 
              type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: createTag
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: Create a new tag
      description: |
        Create a new tag
      parameters:
        - name: body
          in: body
          description: tag creation options
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            The created tag
          schema:
            type: object
        500:
          description: |
            The tag could not be created
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}:
    x-swagger-router-controller: tags
    get:
      operationId: getTag
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Retrieve information about the tag
      description: |
        Retrieve information about the tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            The information about the specified tag
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteTag
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: Delete the specified tag
      description: |
        Delete the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            No content
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}/nodes:
    x-swagger-router-controller: tags
    get:
      operationId: getNodesByTag
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Retrieve nodes with the specified tag
      description: |
        Retrieve nodes with the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            The list of nodes with the specified tag
          schema:
            type: array
            items:
              type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/{tagName}/nodes/workflows:
    x-swagger-router-controller: tags
    post:
      operationId: postWorkflowById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        create workflow for nodes with the specified tag
      description: |
        create workflow for nodes with the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
        - name: body
          in: body
          description: Workflow options
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: Workflow name
          required: false
          type: string
# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.  We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object
      tags: [ "/api/2.0" ]
      responses:
        202:
          description: |
            the workflow has been accepted
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    x-swagger-router-controller: users
    get:
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      operationId: listUsers
      summary: |
        Retrieve a list of users
      description: |
        Retrieve a list of users
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            A list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/user_obj'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt', 'anonymous' ]
      operationId: addUser
      summary: |
        Add a new user
      description: |
        Add a new user
      parameters:
        - name: body
          in: body
          description: User information
          required: true
          schema:
            $ref: '#/definitions/user_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            the user has been created
          schema:
            type: object
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{name}:
    x-swagger-router-controller: users
    patch:
      x-privileges: [ 'ConfigureUsers', 'ConfigureSelf' ]
      x-authentication-type: [ 'jwt' ]
      operationId: modifyUser
      summary: |
        Update properties on a user
      description: |
        Update properties on a user
      parameters:
        - name: name
          in: path
          description: username
          required: true
          type: string
        - name: body
          in: body
          description: User information
          required: true
          schema:
            $ref: '#/definitions/user_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            the user has been updated
          schema:
            type: object
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      operationId: getUser
      summary: |
        Get information about a user
      description: |
        Get information about a user
      parameters:
        - name: name
          in: path
          description: username
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            the user has been updated
          schema:
            $ref: '#/definitions/user_obj'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      operationId: removeUser
      summary: |
        Delete a user
      description: |
        Delete a user
      parameters:
        - name: name
          in: path
          description: username
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            the user has been deleted
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /schemas/{identifier}:
    x-swagger-router-controller: schemas2
    get:
      operationId: schemasIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get a schema by specifying its identifier
      description: |
        Gets a schema by identifier.
      parameters:
        - name: identifier
          in: path
          description: identifier of a schema
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Success
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schemas:
    x-swagger-router-controller: schemas2
    get:
      operationId: schemasGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        get list of all schemas
      description: |
        Get a list of all schemas.
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Success
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks/bootstrap.js:
    x-swagger-router-controller: tasks
    get:
#      disable for now until we are using redfish renderer
#      x-swagger-template: 'bootstrap.js'
      operationId: getBootstrap
      summary: |
        get tasks bootstrap.js
      description: |
        used internally by the system - get tasks bootstrap.js
      parameters:
        - name: macAddress
          in: query
          description: query object to pass through to waterline.
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks/{identifier}:
    x-swagger-router-controller: tasks
    get:
    #do I need a serializer?
      operationId: getTasksById
      x-view: tasks.2.0.json
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]

      summary: |
        get specific task
      description: |
        get specific task
      parameters:
        - name: identifier
          in: path
          description: |
            task identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            single task
          schema:
            type: object
        404:
          description: |
            There is no task with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
#do I need a serializer      x-swagger-serializer: pollers
      operationId: postTaskById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-view: tasks.2.0.json
      summary: |
        post specific task
      description: |
        post specific task
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
        - name: body
          in: body
          description: |
            obm settings to apply.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Specifics of the specified task
          schema:
            type: object
        404:
          description: |
            There is no  task with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  VersionsResponse:
    required:
      - message
    properties:
      message:
        type: string

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

  catalog:
    type: object
    properties:
      id:
        type: string
      source:
        type: string
      node:
        $ref: '#/definitions/node'
      data:
        type: object
        description: arbitrary json object
    required:
    - id
    - source
    - node

  node:
    type: object
    properties:
      id:
        type: string
      profile:
        type: string
      name:
        type: string
      obmSettings:
        type: object
      ipAddresses:
        type: object
      workflows:
        type: array
        items:
          $ref: '#/definitions/graphobject'
      catalogs:
        type: array
        items:
          $ref: '#/definitions/catalog'
      sku:
        $ref: '#/definitions/sku'
    required:
    - profile
    - name

  graphobject:
    properties:
      id:
        type: string
      instanceid:
        type: string
      context:
        type: object
      definition:
        type: object
      tasks:
        type: object
      node:
        $ref: '#/definitions/node'

  sku:
    properties:
      id:
        type: string
      name:
        type: string
      rules:
        type: object
      nodes:
        type: array
        items:
          $ref: '#/definitions/node'
      discoveryGraphName:
        type: string
      discoveryGraphOptions:
        type: object

  lease:
    properties:
      mac:
        type: string
      ipAddress:
        type: string
      reservationTimer:
        type: integer
        format: int32
      reservationExpiresAt:
        type: integer
        format: int64
      renewalTimer:
        type: integer
        format: int32
      rebindingTimer:
        type: integer
        format: int32
      expirationTimer:
        type: integer
        format: int32
      renewalExpiresAt:
        type: integer
        format: int64
      rebindExpiresAt:
        type: integer
        format: int64
      leaseExpiresAt:
        type: integer
        format: int64
      boundFlag:
        type: boolean
      reservedFlag:
        type: boolean
      reserveTimer:
        type: string
        format: int64

    example:
      mac: 08:00:27:52:d2:a4
      ipAddress: 10.1.1.2
      reservationTimer: 30
      renewalTimer: 21600
      rebindingTimer: 4320
      expirationTimer: 86400
      renewalExpiresAt: 1424149074811
      rebindExpiresAt: 1424131794811
      leaseExpiresAt: 1424213874811
      boundFlag: true
      reservedFlag: false

    required:
    - mac
    - ipAddress

  generic_obj:
   type: object

  user_obj:
    properties:
      username:
        type: string
      password:
        type: string
      role:
        type: string
  action:
    description: Action object
    properties:
      command:
        type: string
        description: 'Command to execute'
        enum: [ "cancel" ]
      options:
        type: object
        description: 'Command options object'
    required:
      - command
