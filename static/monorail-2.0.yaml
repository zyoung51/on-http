swagger: "2.0"
info:
  version: "0.0.1"
  title: RackHD 2.0
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /api/2.0
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /versions:
    x-swagger-router-controller: versions
    get:
      description: Returns installed versions to the caller
      # used as the method name of the controller
      operationId: getVersions
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
  /pollers/library:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibGet
      summary: |
        get list of possible library pollers
      description: |
        get list of possible library pollers
      tags:
        - pollers
        - get
      responses:
        200:
          description: |
            list of all pollers
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/library/{identifier}:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibByIdGet
      summary: |
        get a single library poller
      description: |
        get a single library poller
      parameters:
        - name: identifier
          in: path
          description: |
            library poller identifier
          required: true
          type: string
      tags:
        - pollers
        - get
      responses:
        200:
          description: |
            single library poller
          schema:
            type: object
        404:
          description: |
            There is no library poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers:
    x-swagger-router-controller: pollers
    get:
      x-swagger-serializer: pollers
      operationId: pollersGet
      summary: |
        get list of all pollers
      description: |
        get list of all pollers
      tags:
        - pollers
        - get
      responses:
        200:
          description: |
            list of all pollers
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: pollers
      operationId: pollersPost
      summary: |
        create a poller
      description: |
        create a poller
      tags:
        - pollers
        - get
      responses:
        200:
          description: |
            poller created
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}:
    x-swagger-router-controller: pollers
    get:
      x-swagger-serializer: pollers
      operationId: pollersIdGet
      summary: |
        Get specifics of the specified poller
      description: |
        Get specifics of the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags:
        - pollers
        - get
      responses:
        200:
          description: |
            Specifics of the specified poller
          schema:
            type: object
        404:
          description: |
            There is no  poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      x-swagger-deserializer: pollers
      operationId: pollersPatch
      summary: |
        patch specifics of the specified poller
      description: |
        patch specifics of the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags:
        - pollers
        - patch
      responses:
        200:
          description: |
            Specifics of the patched poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: pollersDelete
      summary: |
        delete the specified poller
      description: |
        delete the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags:
        - pollers
        - delete
      responses:
        204:
          description: |
            Poller delete successfully
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/pause:
    x-swagger-router-controller: pollers
    patch:
      x-swagger-serializer: pollers
      operationId: pollersPausePatch
      summary: |
        pause the specified poller
      description: |
        pause the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags:
        - pollers
        - patch
      responses:
        200:
          description: |
            Specifics of the paused poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/resume:
    x-swagger-router-controller: pollers
    patch:
      x-swagger-serializer: pollers
      operationId: pollersResumePatch
      summary: |
        resume the specified poller
      description: |
        resume the specified poller
      parameters:
        - name: identifier
          in: path
          description: |
            poller identifier
          required: true
          type: string
      tags:
        - pollers
        - patch
      responses:
        200:
          description: |
            Specifics of the resumed poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersDataGet
      summary: |
        Get data for the specific poller
      description: |
        Get data for the specific poller
      parameters:
        - name: identifier
          in: path
          description: |
            identifier (ip address or NodeId) for the data from a poller
          required: true
          type: string
      tags:
        - templates
        - get
      responses:
        200:
          description: |
            data for poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data/current:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersCurrentDataGet
      summary: |
        Get latest data for the specific poller
      description: |
        Get latest data for the specific poller
      parameters:
        - name: identifier
          in: path
          description: |
            identifier (ip address or NodeId) for the data from a poller
          required: true
          type: string
      tags:
        - templates
        - get
      responses:
        200:
          description: |
            data for poller
          schema:
            type: object
        404:
          description: |
            There is no poller with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/library:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get list of possible templates
      description: |
        get list of possible templates
      tags:
        - templates
        - get
      responses:
        200:
          description: |
            list of possible templates
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/library/{identifier}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get a single template
      description: |
        get a single template
      parameters:
        - name: identifier
          in: path
          description: |
            template identifier
          required: true
          type: string
      tags:
        - templates
        - get
      responses:
        200:
          description: |
            single template
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: unimplemented
      summary: |
        put a single template
      description: |
        put a single template
      parameters:
        - name: identifier
          in: path
          description: |
            objectid of template
          required: true
          type: string
      tags:
        - templates
        - put
      responses:
        200:
          description: |
            return template
          schema:
            type: object
        404:
          description: |
            There is no template with specified identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /skus:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get list of skus
      description: |
        get list of skus
      tags:
        - skus
        - get
      responses:
        200:
          description: |
             list of skus
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: unimplemented
      summary: |
        create a sku
      description: |
        create a sku
      tags:
        - skus
        - post
      responses:
        200:
          description: |
            sku to create
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get a single sku
      description: |
        get a single sku
      parameters:
        - name: identifier
          in: path
          description: |
            objectid of sku
          required: true
          type: string
      tags:
        - skus
        - get
      responses:
        200:
          description: |
            return sku
          schema:
            type: object
        404:
          description: |
            There is no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: unimplemented
      summary: |
        patch a single sku
      description: |
        patch a single sku
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags:
        - skus
        - patch
      responses:
        200:
          description: |
            sku to patch
          schema:
            type: object
        404:
          description: |
            Not found, no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Patch failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: unimplemented
      summary: |
        Delete specific sku.
      description: |
        Delete specific sku.
      parameters:
        - name: identifier
          in: path
          description: |
            The sku objectid.
          required: true
          type: string
      tags:
        - profiles
        - put
      responses:
        204:
          description: |
            return all skus
          schema:
            type: object
        404:
          description: |
            sku with identifier not found, failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}/nodes:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get nodes for specific sku
      description: |
        get nodes for specific sku
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags:
        - skus
        - nodes
        - get
      responses:
        200:
          description: |
            return nodes associated with that sku
          schema:
            type: object
        404:
          description: |
            There is no sku with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /profiles/library:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get list of possible profiles
      description: |
        get list of possible profiles
      tags:
        - profiles
        - get
      responses:
        200:
          description: |
            list of possible profiles
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/library/{identifier}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get a single profile
      description: |
        get a single profile
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags:
        - profiles
        - get
      responses:
        200:
          description: |
            return profile
          schema:
            type: object
        404:
          description: |
            There is no profile in the library with identifier.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: unimplemented
      summary: |
        put a single profile
      description: |
        put a single profile
      parameters:
        - name: identifier
          in: path
          description: |
            The profile name.
          required: true
          type: string
      tags:
        - profiles
        - put
      responses:
        200:
          description: |
            profile to put
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /obms/library:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get list of possible OBM services
      description: |
        get list of possible OBM services
      tags:
        - obms
        - get
      responses:
        200:
          description: |
            get list of possible OBM services
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/library/{identifier}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get a single OBM service
      description: |
        get a single OBM service
      parameters:
        - name: identifier
          in: path
          description: |
            The obm service name.
          required: true
          type: string
      tags:
        - obms
        - get
      responses:
        200:
          description: |
            return OBM service
          schema:
            type: object
        404:
          description: |
            The obm service with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /workflows/library:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        List all workflows available to run
      description: |
        List all workflows available to run
      tags:
        - workflow
        - get
      responses:
        200:
          description: |
            List all workflows available to run
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/tasks:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        Fetch tasks from task library
      description: |
        Fetch tasks from task library
      tags:
        - workflow
        - task
        - get
      responses:
        200:
          description: |
            Fetch tasks from task library
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: unimplemented
      summary: |
        Add tasks to task library
      description: |
        Add tasks to task library
      tags:
        - workflow
        - task
        - put
      responses:
        200:
          description: |
            Add tasks to task library
          schema:
            type: object
        500:
          description: |
            Error problem was encountered, task was not written.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'
  /workflows:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        Fetch workflows
      description: |
        Fetch workflows
      tags:
        - workflow
        - get
      responses:
        200:
          description: |
            Fetch workflows
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: unimplemented
      summary: |
        define new workflow
      description: |
        define new workflow
      tags:
        - workflow
        - put
      responses:
        200:
          description: |
            Fetch workflows
          schema:
            type: object
        500:
          description: |
            Error problem was encountered, workflow was not written.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/workflows/active:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetActiveWorkflowById
      summary: |
        Fetch currently running workflows for specified node
      description: |
        Fetch currently running workflows for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - workflow
        - get
      responses:
        200:
          description: |
            Fetch currently running workflows for specified node
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: nodesDelActiveWorkflowById
      summary: |
        Cancel currently running workflows for specified node
      description: |
        Cancel currently running workflows for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - workflow
        - delete
      responses:
        200:
          description: |
            Canceled workflows for specified node
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/workflows:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetWorkflowById
      summary: |
        Fetch all workflows for specified node
      description: |
        Fetch all workflows for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - workflow
        - get
      responses:
        200:
          description: |
            all workflows for specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: nodesPostWorkflowById
      summary: |
        create workflow for specified node
      description: |
        create workflow for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: Workflow name
          required: false
          schema:
            type: object
        - name: name
          in: query
          description: Workflow name
          required: false
          type: string
# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.  We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object

      tags:
        - nodes
        - workflow
        - post
      responses:
        200:
          description: |
            the workflow that was created
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /nodes/{identifier}/pollers:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetPollersById
      summary: |
        Fetch all pollers for specified node
      description: |
        Fetch all pollers for specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - pollers
        - get
      responses:
        200:
          description: |
            all pollers of specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs/{source}:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogSourceById
      summary: |
        Fetch catalog of specified node for given source
      description: |
        Fetch catalog of specified node for given source
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: source
          in: path
          description: |
            Source catalog name to fetch
          required: true
          type: string
      tags:
        - nodes
        - catalogs
        - get
      responses:
        200:
          description: |
            specific source catalog of specified node, |
            empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogById
      summary: |
        Fetch catalog of specified node
      description: |
        Fetch catalog of specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - catalogs
        - get
      responses:
        200:
          description: |
            all catalogs of specified node, empty object if none exist.
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/obm/identify:
    x-swagger-router-controller: nodes
    get:
      operationId: unimplemented
      summary: |
        Fetch status of identify light on node through OBM (if supported)
      description: |
        Fetch status of identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - obm
        - identify
        - get
      responses:
        200:
          description: obm identity light settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: nodesPostObmIdById
      summary: |
        Enable or disable identify light on node through OBM (if supported)
      description: |
        Enable or disable identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - obm
        - identify
        - post
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/obm:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesGetObmById
      summary: |
        get the obm settings associated with a node.
      description: |
        get the obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - obm
        - get
      responses:
        200:
          description: obm settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPostObmById
      summary: |
        set the obm settings associated with a node.
      description: |
        set he obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            obm settings to apply.
          required: true
          schema:
            type: object
      tags:
        - nodes
        - obm
        - post
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesGetById
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - get
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: nodesDelById
      summary: |
        Delete specified node.
      description: |
        Delete specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - delete
      responses:
        200:
          description: Delete successful
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPatchById
      summary: |
        Patch specified node
      description: |
        Patch specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema:
            type: object
      tags:
        - nodes
        - patch
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/tags:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetTagsById
      summary: |
        List of all tags on the node or an empty object if there are none
      description: |
        List of all tags on the node or an empty object if there are none
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
      tags:
        - nodes
        - get
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: nodesPatchTagById
      summary: |
        Patch tags onto specified node
      description: |
        Patch tags onto specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema:
            type: object
      tags:
        - nodes
        - patch
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/tags/{tagName}:
    x-swagger-router-controller: nodes
    delete:
      operationId: nodesDelTagById
      summary: |
        Delete a tag from the specified node.
      description: |
        Delete a tag from the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses or unique aliases to identify the node by
          required: true
          type: string
        - name: tagName
          in: path
          description: The name of the tag
          required: true
          type: string
      tags:
        - nodes
        - delete
      responses:
        204:
          description: Delete successful
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      operationId: nodesGetAll
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      tags:
        - nodes
        - get
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        400:
          description: invalidAttributes - 1 attribute is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      # swagger template and schema names (not sure how to get schema in fitting)...
      operationId: nodesPost
      summary: |
        post
      description: |
        post
      parameters:
      - name: identifiers
        in: body
        description: |
          Mac addresses and unique aliases to identify the node by, |
          expect a string or an array of strings.
        required: true
        schema:
          type: object
      tags:
        - nodes
        - post
      responses:
        201:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /lookups:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        find all
      description: |
        find all
      tags:
        - lookups
        - get
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: unimplemented
      summary: |
        find all
      description: |
        put all
      parameters:
      - name: content
        in: body
        description: foo
        required: true
        schema:
          type: object
      tags:
        - lookups
        - post
      responses:
        200:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /lookups/{id}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        lookup id
      description: |
        lookup id
      parameters:
        - name: id
          in: path
          description: id of thing to lookup
          required: true
          type: string
      tags:
        - lookups
        - get
      responses:
        200:
          description: array of all
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: unimplemented
      summary: |
        post id
      description: |
        post id
      parameters:
      - name: id
        in: path
        description: id of thing to lookup
        required: true
        type: string
      - name: content
        in: body
        description: foo
        required: true
        schema:
          type: object
      tags:
        - lookups
        - post
      responses:
        200:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{fileidentifier}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get file based on uuid
      description: |
        Get file based on uuid.
      parameters:
        - name: fileidentifier
          in: path
          description: uuid of a file as provided when you originally stored it.
          required: true
          type: string
      tags:
        - files
        - get
      responses:
# https://github.com/swagger-api/swagger-spec/issues/260 means we can't
# describe the return of a file easily today until jsonspec and swagger
# are "fixed"
        200:
          description: The file requested
          schema:
            type: object
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: unimplemented
      summary: |
        put file based on filename
      description: |
        Put file based on filename, returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: filename of the file you want to store
          required: true
          type: string
# https://github.com/swagger-api/swagger-spec/issues/326 does not yet accept files
#       - name: content
#          in: body
#          description: the attachment content
#          required: true
#          schema:
#            type: file
#      consumes:
#        - application/octet-stream
      tags:
        - files
        - post
      responses:
        200:
          description: The file was stored
          schema:
            type: object
        201:
          description: Ready.
          schema:
            type: string
        500:
          description: Failure serving file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: unimplemented
      summary: |
        delete file based on uuid
      description: |
        Put file based on filename, returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: filename identifier of the file you wish to delete
          required: true
          type: string
      tags:
        - files
        - delete
      responses:
        204:
          description: File successfully deleted.
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Error deleting file from the database.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /config:
    x-swagger-router-controller: config
    get:
      operationId: getConfig
      summary: |
        get server configuration
      description: |
        Get server configuration.
      tags:
        - config
        - get
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: patchConfig
      summary: |
        patch/update server configuration
      description: |
        Patch/update server configurationm and then return the patched configuration.
      tags:
        - config
        - patch
      consumes:
        - application/json
      parameters:
        - name: config
          in: body
          description: Updated config fields
          required: true
          schema:
            type: object
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /catalogs:
    x-swagger-router-controller: catalogs
    get:
      operationId: getCatalog
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: query
          in: query
          description: query object to pass through to waterline.
          required: false
          type: string
      tags:
        - catalog
        - get
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalogs/{identifier}:
    x-swagger-router-controller: catalogs
    get:
      operationId: getCatalogById
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: identifier
          in: path
          description: identifier of a catalog
          required: true
          type: string
      tags:
        - catalog
        - get
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dhcp:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        get DHCP lease table
      description: |
        Fetch the dhcp leases.
      tags:
        - dhcp
        - get
      responses:
        200:
          description: |
            A list of all DHCP leases registered with this instance of the service.
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
  /dhcp/lease/{mac}:
    x-swagger-router-controller: unimplemented
    get:
      operationId: unimplemented
      summary: |
        fetch lease information for the mac specified
      description: |
        Fetch lease information for the mac specified.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags:
        - dhcp
        - get
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
    delete:
      operationId: unimplemented
      summary: get list of all catalogs
      description: |
        Delete the lease for the mac specified and return information about deleted lease.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags:
        - dhcp
        - delete
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
  /tags:
    x-swagger-router-controller: tags
    get:
      operationId: getAllTags
      summary: Retrieve information about all tags
      description: |
        Retrieve information about all tags
      tags: [ "/monorail/v2.0" ]
      responses:
        200:
          description: |
            An array of all tags
          schema:
            type: array
            items: 
              type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: createTag
      summary: Create a new tag
      description: |
        Create a new tag
      parameters:
        - name: body
          in: body
          description: tag creation options
          required: true
          schema:
            type: object
      tags: [ "/monorail/v2.0" ]
      responses:
        200:
          description: |
            The created tag
          schema:
            type: object
        500:
          description: |
            The tag could not be created
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}:
    x-swagger-router-controller: tags
    get:
      operationId: getTag
      summary: Retrieve information about the tag
      description: |
        Retrieve information about the tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/monorail/v2.0" ]
      responses:
        200:
          description: |
            The information about the specified tag
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteTag
      summary: Delete the specified tag
      description: |
        Delete the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/monorail/v2.0" ]
      responses:
        204:
          description: |
            No content
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}/nodes:
    x-swagger-router-controller: tags
    get:
      operationId: getNodesByTag
      summary: Retrieve nodes with the specified tag
      description: |
        Retrieve nodes with the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/monorail/v2.0" ]
      responses:
        200:
          description: |
            The list of nodes with the specified tag
          schema:
            type: array
            items:
              type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/{tagName}/nodes/workflows:
    x-swagger-router-controller: tags
    post:
      operationId: postWorkflowById
      summary: |
        create workflow for nodes with the specified tag
      description: |
        create workflow for nodes with the specified tag
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
        - name: body
          in: body
          description: Workflow options
          required: false
          schema:
            type: object
        - name: name
          in: query
          description: Workflow name
          required: false
          type: string
# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.  We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object
      tags: [ "/monorail/v2.0" ]
      responses:
        202:
          description: |
            the workflow has been accepted
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  VersionsResponse:
    required:
      - message
    properties:
      message:
        type: string

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  catalog:
    type: object
    properties:
      id:
        type: string
      source:
        type: string
      node:
        $ref: '#/definitions/node'
      data:
        type: object
        description: arbitrary json object
    required:
    - id
    - source
    - node
  node:
    type: object
    properties:
      id:
        type: string
      profile:
        type: string
      name:
        type: string
      obmSettings:
        type: object
      ipAddresses:
        type: object
      workflows:
        type: array
        items:
          $ref: '#/definitions/graphobject'
      catalogs:
        type: array
        items:
          $ref: '#/definitions/catalog'
      sku:
        $ref: '#/definitions/sku'
    required:
    - profile
    - name
  graphobject:
    properties:
      id:
        type: string
      instanceid:
        type: string
      context:
        type: object
      definition:
        type: object
      tasks:
        type: object
      node:
        $ref: '#/definitions/node'
  sku:
    properties:
      id:
        type: string
      name:
        type: string
      rules:
        type: object
      nodes:
        type: array
        items:
          $ref: '#/definitions/node'
      discoveryGraphName:
        type: string
      discoveryGraphOptions:
        type: object
  lease:
    properties:
      mac:
        type: string
      ipAddress:
        type: string
      reservationTimer:
        type: integer
        format: int32
      reservationExpiresAt:
        type: integer
        format: int64
      renewalTimer:
        type: integer
        format: int32
      rebindingTimer:
        type: integer
        format: int32
      expirationTimer:
        type: integer
        format: int32
      renewalExpiresAt:
        type: integer
        format: int64
      rebindExpiresAt:
        type: integer
        format: int64
      leaseExpiresAt:
        type: integer
        format: int64
      boundFlag:
        type: boolean
      reservedFlag:
        type: boolean
      reserveTimer:
        type: string
        format: int64
    example:
      mac: 08:00:27:52:d2:a4
      ipAddress: 10.1.1.2
      reservationTimer: 30
      renewalTimer: 21600
      rebindingTimer: 4320
      expirationTimer: 86400
      renewalExpiresAt: 1424149074811
      rebindExpiresAt: 1424131794811
      leaseExpiresAt: 1424213874811
      boundFlag: true
      reservedFlag: false
    required:
    - mac
    - ipAddress
